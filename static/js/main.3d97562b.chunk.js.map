{"version":3,"sources":["serviceWorker.js","api.js","reducer.js","store.js","AddNewItemForm.jsx","CloseButton.jsx","TodoListTask.jsx","TodoListTasks.jsx","TodoListFooter.jsx","TotoListTitle.jsx","TodoList.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","instance","axios","create","baseURL","withCredentials","headers","api","title","post","then","res","data","get","newText","todolisId","todoListId","taskID","task","obj","put","delete","todolistId","initialState","todolists","store","createStore","state","action","type","newTodoList","tasks","map","tl","id","newTask","filter","t","applyMiddleware","thunk","AddNewItemForm","error","inputValue","newInputValue","e","setState","currentTarget","value","onAddItemClick","trim","props","addItem","onKeyPress","key","render","classToError","className","onChange","placeholder","onClick","React","Component","CloseButton","dellEntity","TodoListTask","editMode","isEditModeActivated","isEditModeDeActivated","changeStatusTitle","onTitleChange","onIsDoneChanged","event","status","checked","changeStatus","dellTask","statusTask","taskIsDoneClass","autoFocus","onBlur","priority","TodoListTasks","taskElements","TodoListFooter","isHiden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","changeTodoList","dellTodoList","TodoList","addTask","restoreState","setTasks","newFilterValue","changeTask","taskId","this","ConnectTodoList","connect","dispatch","getState","resultCode","item","addTaskSuccess","response","changeTaskSuccess","dellTaskSuccess","dellTodolistSuccess","setTasksSuccess","items","changeTodoListSuccess","App","addTodoList","setTodoLists","td","ContainerApp","todoList","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d97562b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. TodoList is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists/\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"e655fc0d-99c3-4c81-8dea-0837243fe8bf\"}\r\n})\r\n\r\nexport const api = {\r\n    createTodoList(title) {\r\n        return instance.post(\r\n            ``,\r\n            {title: title},\r\n        )\r\n            .then(res => res.data)\r\n    },\r\n    getTodoList() {\r\n        return instance.get(``\r\n        )\r\n            .then(res => res)\r\n    },\r\n    postTasks(newText, todolisId) {\r\n        return instance.post(\r\n            `${todolisId}/tasks`,\r\n            {title: newText},\r\n        )\r\n            .then(res => res.data)\r\n    },\r\n    getTasks(todoListId) {\r\n        return instance.get(`${todoListId}/tasks`)\r\n            .then(res => res.data)\r\n    },\r\n    putChangeTask(todoListId, taskID, task, obj) {\r\n        return instance.put(\r\n            `${todoListId}/tasks/${taskID}`,\r\n            {...task, ...obj}, //Передаем таску с иммутабельно измененным свойством status\r\n        )\r\n            .then(res => res.data)\r\n    },\r\n    deleteTask(todoListId, taskID) {\r\n        return axios.delete(\r\n            `https://social-network.samuraijs.com/api/1.1/todo-lists/${todoListId}/tasks/${taskID}`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\"API-KEY\": \"e655fc0d-99c3-4c81-8dea-0837243fe8bf\"}\r\n            }\r\n        )\r\n            .then(res => res.data)\r\n    },\r\n    deleteTodoList(todoListId) {\r\n        return instance.delete(`${todoListId}`,\r\n        )\r\n            .then(res => res.data)\r\n    },\r\n    updateTodolistTitle(todolistId, title) {\r\n        return instance.put(\r\n            `${todolistId}`,\r\n            {title: title}\r\n        )\r\n            .then(res => res.data)\r\n    }\r\n}","import {api} from \"./api\";\r\n\r\nconst ADD_TODOLIST_SUCCESS = \"ADD_TODOLIST_SUCCESS\";\r\nconst ADD_TASK_SUCCESS = \"ADD_TASK_SUCCESS\";\r\nconst CHANGE_TASK_SUCCESS = \"CHANGE_TASK_SUCCESS\";\r\nconst DELL_TASK_SUCCESS = \"DELL_TASK_SUCCESS\";\r\nconst DELL_TODOLIST_SUCCESS = \"DELL_TODOLIST_SUCCESS\";\r\nconst SET_TODOLIST_SUCCESS = \"SET_TODOLIST_SUCCESS\";\r\nconst SET_TASKS_SUCCESS = \"SET_TASKS_SUCCESS\";\r\nconst CHANGE_TODOLIST_SUCCESS = \"CHANGE_TODOLIST_SUCCESS\";\r\n\r\n\r\nconst initialState = {\r\n    todolists: [],\r\n};\r\n\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, {...action.newTodoList, tasks: []}],\r\n            };\r\n        case ADD_TASK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists.map(tl => {\r\n                    if (tl.id === action.todoListId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]};\r\n                    } else {\r\n                        return tl;\r\n                    }\r\n                })],\r\n            };\r\n        case CHANGE_TASK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists.map(tl => {\r\n                    if (tl.id === action.task.todoListId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(task => {\r\n                                if (task.id !== action.task.id) {\r\n                                    return task;\r\n                                } else {\r\n                                    return {...action.task};\r\n                                }\r\n                            }),\r\n                        };\r\n                    } else {\r\n                        return tl;\r\n                    }\r\n                })],\r\n            };\r\n        case DELL_TASK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todoListId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: [...tl.tasks.filter(t => {\r\n                                if (t.id !== action.taskID) {\r\n                                    return t;\r\n                                }\r\n                            })],\r\n                        };\r\n                    }\r\n                    return tl;\r\n                }),\r\n            };\r\n        case DELL_TODOLIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists.filter(tl => {\r\n                    if (tl.id !== action.todoListId) {\r\n                        return tl;\r\n                    }\r\n                })],\r\n\r\n            };\r\n        case SET_TODOLIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => {\r\n                    return {...tl, tasks: []};\r\n                }),\r\n            };\r\n        case SET_TASKS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todoListId) {\r\n                        return tl;\r\n                    } else {\r\n                        return {...tl, tasks: action.tasks};\r\n                    }\r\n                }),\r\n            };\r\n        case CHANGE_TODOLIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todoListId) {\r\n                        return tl;\r\n                    } else {\r\n                        return {...tl, title: action.title};\r\n                    }\r\n                }),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n// actionCreators\r\n\r\nexport const addTodoListSuccess = (newTodoList) => ({type: ADD_TODOLIST_SUCCESS, newTodoList});\r\nexport const addTaskSuccess = (todoListId, newTask) => ({type: ADD_TASK_SUCCESS, todoListId, newTask});\r\nexport const changeTaskSuccess = (task) => ({type: CHANGE_TASK_SUCCESS, task});\r\nexport const dellTaskSuccess = (todoListId, taskID) => ({type: DELL_TASK_SUCCESS, todoListId, taskID});\r\nexport const dellTodolistSuccess = (todoListId) => ({type: DELL_TODOLIST_SUCCESS, todoListId});\r\nexport const setTodoListsSuccess = (todolists) => ({type: SET_TODOLIST_SUCCESS, todolists});\r\nexport const setTasksSuccess = (todoListId, tasks) => ({type: SET_TASKS_SUCCESS, tasks, todoListId});\r\nexport const changeTodoListSuccess = (todoListId, title) => ({type: CHANGE_TODOLIST_SUCCESS, todoListId, title});\r\n\r\n\r\n//Thunk\r\n\r\n\r\nexport const setTodoLists = () => (dispatch, getState) => {\r\n    //requests to server\r\n    api.getTodoList()\r\n        .then(res => {\r\n            //dispatch action\r\n            dispatch(setTodoListsSuccess(res.data));\r\n        });\r\n};\r\n\r\nexport const addTodoList = (title) => (dispatch, getState) => {\r\n    api.createTodoList(title)\r\n        .then(res => {\r\n            let todoList = res.data.item;\r\n            dispatch(addTodoListSuccess(todoList));\r\n        });\r\n};\r\n\r\nexport const addTask = (newText, todoListId) => (dispatch, getState) => {\r\n    api.postTasks(newText, todoListId)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                let newTask = res.data.item;\r\n                dispatch(addTaskSuccess(todoListId, newTask));\r\n            }\r\n        });\r\n};\r\n\r\nexport const changeTask = (todoListId, taskId, task, obj) => (dispatch, getState) => {\r\n    api.putChangeTask(todoListId, taskId, task, obj)\r\n        .then(response => {\r\n            if (response.resultCode === 0) {\r\n                dispatch(changeTaskSuccess(response.data.item));\r\n            }\r\n        });\r\n};\r\n\r\nexport const dellTask = (todoListId, taskId) => (dispatch, getState) => {\r\n    api.deleteTask(todoListId, taskId)\r\n        .then(response => {\r\n            if (response.resultCode === 0) {\r\n                dispatch(dellTaskSuccess(todoListId, taskId));\r\n            }\r\n        });\r\n};\r\n\r\nexport const dellTodoList = (todoListId) => (dispatch, getState) => {\r\n    api.deleteTodoList(todoListId)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(dellTodolistSuccess(todoListId));\r\n            }\r\n        });\r\n};\r\n\r\nexport const setTasks = (todoListId) => (dispatch, getState) => {\r\n    api.getTasks(todoListId)\r\n        .then(res => {\r\n            if (!res.error) {\r\n                dispatch(setTasksSuccess(todoListId, res.items));\r\n            }\r\n        });\r\n};\r\n\r\nexport const changeTodoList = (todoListId, title) => (dispatch, getState) => {\r\n    api.updateTodolistTitle(todoListId, title)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(changeTodoListSuccess(todoListId, title));\r\n            }\r\n        });\r\n};","import {applyMiddleware, createStore} from \"redux\";\r\nimport {reducer} from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nwindow.store = store\r\n\r\nexport default store\r\n\r\n","import React from 'react';\r\n\r\nclass AddNewItemForm extends React.Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    state = {\r\n        error: false,\r\n        inputValue: ''\r\n    }\r\n\r\n    newInputValue = (e) => {\r\n        this.setState({inputValue: e.currentTarget.value});\r\n        this.setState({\r\n            error: false\r\n        })\r\n    }\r\n\r\n    onAddItemClick = () => {\r\n        let newText = this.state.inputValue.trim();\r\n        if (newText === \"\") {\r\n            this.setState({\r\n                error: true\r\n            })\r\n        } else {\r\n            this.props.addItem(newText);\r\n            this.state.inputValue = '';\r\n        }\r\n    }\r\n\r\n    onKeyPress = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            this.onAddItemClick();\r\n        }\r\n    }\r\n\r\n\r\n    render = () => {\r\n\r\n        let classToError = this.state.error === true ? \"error\" : \"input\";\r\n\r\n        return (\r\n            <div className=\"todoList-header\">\r\n                <div className=\"todoList-newTaskForm\">\r\n                    <input\r\n                        value={this.state.inputValue}\r\n                        onChange={this.newInputValue}\r\n                        className={classToError}\r\n                        type=\"text\"\r\n                        placeholder=\"New item name\"\r\n                        onKeyPress={this.onKeyPress}\r\n                    />\r\n                    <button className={\"button\"} onClick={this.onAddItemClick}>Add</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;","import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nconst CloseButton = (props) => {\r\n    return (\r\n        <span onClick={props.dellEntity} className={\"closeButton\"}></span>\r\n    )\r\n};\r\n\r\nexport default CloseButton;","import React from 'react';\r\nimport CloseButton from \"./CloseButton\";\r\n\r\nclass TodoListTask extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.task.title\r\n    }\r\n\r\n    isEditModeActivated = () => {\r\n        this.setState({editMode: true,})\r\n    }\r\n\r\n    isEditModeDeActivated = () => {\r\n        this.props.changeStatusTitle(this.props.task, this.state.title)\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n    }\r\n\r\n    onTitleChange = (e) => {\r\n        this.setState({title: e.currentTarget.value})\r\n    }\r\n\r\n\r\n    onIsDoneChanged = (event) => {\r\n        let status = event.currentTarget.checked ? 2 : 0;\r\n        this.props.changeStatus(this.props.task, status);\r\n    };\r\n\r\n    onKeyPress = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            this.isEditModeDeActivated();\r\n        }\r\n    }\r\n\r\n    dellTask = () => {\r\n        this.props.dellTask(this.props.task.id)\r\n    }\r\n\r\n\r\n    render = () => {\r\n        let statusTask = this.props.task.status;\r\n        let taskIsDoneClass = statusTask === 2 ? 'todoList-task done' : 'todoList-task';\r\n\r\n        return (\r\n            <div className={taskIsDoneClass}>\r\n                <div>\r\n                    <input\r\n                        onChange={this.onIsDoneChanged}\r\n                        type=\"checkbox\"\r\n                        checked={statusTask === 2}\r\n                    />\r\n                    {this.state.editMode ?\r\n                        <input\r\n                            value={this.state.title}\r\n                            autoFocus={true}\r\n                            onBlur={this.isEditModeDeActivated}\r\n                            onChange={this.onTitleChange}\r\n                            onKeyPress={this.onKeyPress}\r\n                        />\r\n                        : <span\r\n                            onClick={this.isEditModeActivated}>\r\n                            {this.props.task.id} - {this.props.task.title}: {this.props.task.priority}\r\n                    </span>\r\n                    }\r\n                    <CloseButton dellEntity={this.dellTask}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default TodoListTask;","import React from 'react';\r\nimport TodoListTask from \"./TodoListTask\";\r\n\r\nclass TodoListTasks extends React.Component {\r\n\r\n\r\n    render = () => {\r\n\r\n        let myFn = (t) => {\r\n            return (\r\n                <TodoListTask\r\n                    task={t}\r\n                    changeStatus={this.props.changeStatus}\r\n                    changeStatusTitle={this.props.changeStatusTitle}\r\n                    dellTask={this.props.dellTask}\r\n                />\r\n            )\r\n        };\r\n\r\n        let taskElements = this.props.tasks.map(myFn);\r\n        return (\r\n            <div className=\"todoList-tasks.isDone\">\r\n\r\n                {taskElements}\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TodoListTasks;","import React from 'react';\r\n\r\nclass TodoListFooter extends React.Component {\r\n\r\n    state = {\r\n        isHiden: true\r\n    };\r\n\r\n\r\n    onAllFilterClick = () => {this.props.changeFilter(\"All\")};\r\n    onCompletedFilterClick = () => {this.props.changeFilter(\"Completed\")}\r\n    onActiveFilterClick = () => {this.props.changeFilter(\"Active\")};\r\n    onShowFiltersClick = () => {this.setState({isHiden: false})};\r\n    onHideFiltersClick = () => {this.setState({isHiden: true})};\r\n\r\n    render = () => {\r\n\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"button\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"button\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"button\";\r\n\r\n        return (\r\n            <div className=\"todoList-footer\">\r\n                {this.state.isHiden && <div>\r\n                    <button\r\n                        className={classForAll}\r\n                        onClick={this.onAllFilterClick}\r\n                    >All</button>\r\n                    <button\r\n                        className={classForCompleted}\r\n                        onClick={this.onCompletedFilterClick}\r\n                    >Completed</button>\r\n                    <button\r\n                        className={classForActive}\r\n                        onClick={this.onActiveFilterClick}\r\n                    >Active\r\n                    </button>\r\n                </div>}\r\n                <div className={\"showHideTask\"}>\r\n                    <button className=\"button\" onClick={this.onHideFiltersClick}>show</button>\r\n                    <button className=\"button\" onClick={this.onShowFiltersClick}>hide</button>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;\r\n","import React from 'react';\r\nimport CloseButton from \"./CloseButton\";\r\n\r\nclass TodoListTitle extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.title\r\n    }\r\n\r\n    onTitleChange = (e) => {\r\n        this.setState({title: e.currentTarget.value})\r\n    }\r\n\r\n    onKeyPress = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            this.isEditModeDeActivated();\r\n        }\r\n    }\r\n\r\n    isEditModeActivated = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n\r\n    isEditModeDeActivated = () => {\r\n        this.props.changeTodoList(this.state.title)\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n    }\r\n\r\n    dellTodoList = () => {\r\n        this.props.dellTodoList()\r\n    }\r\n\r\n\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div className=\"todoList-title\">\r\n                {this.state.editMode ?\r\n                    <input\r\n                        value={this.state.title}\r\n                        autoFocus={true}\r\n                        onBlur={this.isEditModeDeActivated}\r\n                        onChange={this.onTitleChange}\r\n                        onKeyPress={this.onKeyPress}\r\n                    />\r\n                    : <h3 className=\"todoList-header__title\" onClick={this.isEditModeActivated}>{this.props.title}</h3>\r\n                }\r\n                <CloseButton dellEntity={this.dellTodoList}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTitle;","import React from 'react';\r\nimport './App.css';\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport TodoListFooter from \"./TodoListFooter\";\r\nimport TodoListTitle from \"./TotoListTitle\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTask, changeTask, changeTodoList, dellTask, dellTodoList, setTasks} from \"./reducer\";\r\n\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    state = {\r\n        filterValue: \"All\",\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.restoreState()\r\n    }\r\n\r\n\r\n    addTask = (newText) => {\r\n        this.props.addTask(newText, this.props.id)\r\n    };\r\n\r\n    restoreState = () => {\r\n        this.props.setTasks(this.props.id)\r\n    }\r\n\r\n    changeFilter = (newFilterValue) => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        })\r\n    };\r\n\r\n    changeTask = (task, obj) => {\r\n        this.props.changeTask(this.props.id, task.id, task, obj)\r\n    }\r\n\r\n\r\n    changeStatus = (task, status) => {\r\n        this.changeTask(task, {status})\r\n    };\r\n\r\n\r\n    changeStatusTitle = (task, title) => {\r\n        this.changeTask(task, {title})\r\n    };\r\n\r\n\r\n    dellTask = (taskId) => {\r\n        this.props.dellTask(this.props.id, taskId)\r\n    }\r\n\r\n    dellTodoList = () => {\r\n        this.props.dellTodoList(this.props.id)\r\n   }\r\n\r\n    changeTodoList = (title) => {\r\n        this.props.changeTodoList(this.props.id, title)\r\n    }\r\n\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"todoList\">\r\n                <div>\r\n                    <TodoListTitle\r\n                        title={this.props.title}\r\n                        dellTodoList={this.dellTodoList}\r\n                        changeTodoList={this.changeTodoList}\r\n                    />\r\n                    <AddNewItemForm addItem={this.addTask}\r\n                    />\r\n                    <TodoListTasks\r\n                        tasks={this.props.tasks.filter(t => {\r\n                            if (this.state.filterValue === \"All\") {\r\n                                return true;\r\n                            }\r\n                            if (this.state.filterValue === \"Active\") {\r\n                                return t.status === 0;\r\n                            }\r\n                            if (this.state.filterValue === \"Completed\") {\r\n                                return t.status === 2;\r\n                            }\r\n                        })}\r\n                        changeStatus={this.changeStatus}\r\n                        changeStatusTitle={this.changeStatusTitle}\r\n                        dellTask={this.dellTask}\r\n                    />\r\n                    <TodoListFooter\r\n                        filterValue={this.state.filterValue}\r\n                        changeFilter={this.changeFilter}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst ConnectTodoList = connect(null, {\r\n    addTask,\r\n    changeTask,\r\n    dellTask,\r\n    dellTodoList,\r\n    setTasks,\r\n    changeTodoList\r\n})(TodoList)\r\n\r\nexport default ConnectTodoList;","import React from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTodoList, setTodoLists} from \"./reducer\";\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    addTodoList = (title) => {\r\n        this.props.addTodoList(title);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    }\r\n\r\n    restoreState = () => {\r\n        this.props.setTodoLists();\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        let todolists = this.props.todolists.map(td => <TodoList\r\n            key={td.id}\r\n            id={td.id}\r\n            title={td.title}\r\n            tasks={td.tasks}\r\n        />);\r\n\r\n        return (\r\n            <div>\r\n                <AddNewItemForm addItem={this.addTodoList}/>\r\n                <div className=\"App\">\r\n                    {todolists}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todolists: state.todolists,\r\n    };\r\n};\r\n\r\n\r\nconst ContainerApp = connect(mapStateToProps, {setTodoLists, addTodoList})(App);\r\nexport default ContainerApp;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./store\";\r\nimport ContainerApp from \"./App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ContainerApp />\r\n    </Provider>\r\n\r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}